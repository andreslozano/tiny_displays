#! /usr/bin/env python
#-*- coding: utf-8 -*-
import time, textwrap, copy

import Adafruit_GPIO.SPI as SPI
from Adafruit_SSD1306 import SSD1306_128_64

# He andado muchos caminos, 
# he abierto muchas veredas; 
# he navegado en cien mares, 
# y atracado en cien riberas. 

class OledSSD1306(SSD1306_128_64):
	def __init__(self, rst=None, dc=None, spi=None):
		SSD1306_128_64.__init__(self, rst=rst, dc=dc, spi=spi)
		self.OLED_Normal_Display = 0xa6
		self.OLED_Inverse_Display = 0xa7
		self.OLED_Activate_Scroll = 0x2f
		self.OLED_Desactivate_Scroll = 0x2e
		self.OLED_Scroll_Left = 0x27
		self.OLED_Scroll_Right = 0x26

		self.OLED_Scroll_2Frames = 0x7
		self.OLED_Scroll_3Frames = 0x4
		self.OLED_Scroll_4Frames = 0x5
		self.OLED_Scroll_5Frames = 0x0
		self.OLED_Scroll_25Frames = 0x6
		self.OLED_Scroll_64Frames = 0x1
		self.OLED_Scroll_128Frames = 0x2
		self.OLED_Scroll_256Frames = 0x3

		self.NULLBYTE = 0x00
		self.FFBYTE = 0xff
		
		self.row = 0
		self.col = 0
		self.ascii = self.getAscii()
				 
	def init_OLED(self):
		self.begin()
		
	def clearDisplay(self):
		self.clear()
		self.display()

	def setRowCol(self, row=0, col=0):
		self.row = row
		self.col = col

	def showTextAt(self, string="", row=0, col=0, align=0, fill=1): # align: 0 left, 1 center, 2 right; sp fill white space
		length = (16 - col)
		self.setRowCol(row=row, col=col)
		if len(string) > length: # over screen
			for line in textwrap.wrap(string, length):
				line = self.alignText(string=line, align=align, col=col, fill=fill)
				self.putText(string=line)
				row += 1
				if row == 8: row = 0
				self.setRowCol(row=row, col=col) # reset row & col
		else:
			string = self.alignText(string=string, align=align, col=col, fill=fill)
			self.putText(string=string)
		
	def showPageAt(self, row=0, col=0, data=None):
		# screen is composed of 16 x 8 = 128 pages of 8 bytes that you can manage as graphic unit
		self.setRowCol(row=row, col=col)
		if type(data).__name__ == "list" and len(data) == 64:
			page = self.getPageFromPixels(data)
		elif  type(data).__name__ == "list" and len(data) == 8:
			page = data
		elif type(data).__name__ == "str" and len(data) == 8:
			page = map(ord, data)
		else:
			# null page
			page = [0] * 8
		
		x = (self.col*8)+(self.row*128)
		self._buffer[x:x+8] = page
		self.display()
		
	def showImage(self, file=None, data=None):
		return fillScreen(file=None, data=None)
		
	def fillScreen(self, file=None, data=None):
		# file must be an bytearray/binary file, use convert-image-to-oled.py to convert any image
		if file and file.endswith(".bin"):# file priority
			try:
				with open(file, "rb") as f:
					data = map(ord, f.read())
			except:
				print "can't open file",file
				return 0
				
		self._buffer = copy.copy(data)
		self.display()

	def setScroll(self, to="right", start=0, end=7, speed=2):
		# start row, end row
		# speed: 2 frames is the fastest, 256 frames is the slowest
		speed = str(speed)
		speedList = {
			"2":self.OLED_Scroll_2Frames, "3":self.OLED_Scroll_3Frames, "4":self.OLED_Scroll_4Frames, 
			"5":self.OLED_Scroll_5Frames, "25":self.OLED_Scroll_25Frames, "64":self.OLED_Scroll_64Frames, 
			"128":self.OLED_Scroll_128Frames, "256":self.OLED_Scroll_256Frames
		}
		if speed in speedList.keys():
			if to == "left": # from the left to right
				self.writeCommand([self.OLED_Scroll_Left, self.NULLBYTE, start, speedList[speed], end, self.NULLBYTE, self.FFBYTE])
			else:    # go to the right
				self.writeCommand([self.OLED_Scroll_Right, self.NULLBYTE, start, speedList[speed], end, self.NULLBYTE, self.FFBYTE])
			
	def activeScroll(self):
		self.writeCommand(self.OLED_Activate_Scroll)
			
	def desactiveScroll(self):
		self.writeCommand(self.OLED_Desactivate_Scroll)
		
	def setBrightness(self, value=0):
		self.set_contrast(value)
		
	def inverseDisplay(self):
		self.writeCommand(self.OLED_Inverse_Display) # set inverse Display
		
	def normalDisplay(self):
		self.writeCommand(self.OLED_Normal_Display) # set Normal Display (default)

	def setHorizontalMode(self):
		self.writeCommand(None)

	def setPageMode(self):
		self.writeCommand(None)
		
		# sub functions			
	def writeData(self, dat=None):
		if type(dat).__name__ == "list" and len(dat) <= 32:
			for byte in dat:
				self.command(byte)
		elif type(dat).__name__ == "int":
			self.data(dat)

	def writeCommand(self, cmd=None):
		if type(cmd).__name__ == "list":
			for byte in cmd:
				self.command(byte)
		elif type(cmd).__name__ == "int":
			self.command(cmd)
		
	# sub functions	
	def getPageFromPixels(self, pixels=None):
		"""
		return array of 8 bytes from 64 pixels description ex:
		pixels = [ # heart
			0, 0, 0, 0, 0, 0, 0, 0,
			0, 1, 1, 0, 1, 1, 0, 0,
			1, 1, 1, 1, 1, 1, 1, 0,
			1, 1, 1, 1, 1, 1, 1, 0,
			0, 1, 1, 1, 1, 1, 0, 0,
			0, 0, 1, 1, 1, 0, 0, 0,
			0, 0, 0, 1, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0
		]
		"""
		bytes = []
		if len(pixels) == 64:
			for x in xrange(8):
				col = []
				for y in xrange(8):
					col.append(pixels[x+(y*8)])
					
				bytes.append(int("".join([str(pix) for pix in col[::-1]]), 2))
		else:
			bytes = [0] * 8
				
		return bytes
	
	def putText(self, string=""):
		for i, c in enumerate(string):
			if ord(c) > 127: # no ascii chars
				page = [0] * 8 # empty 8 bytes page
			else:  
				page = self.ascii[ord(c)] # ascii 8 bytes page
				
			x = (self.col*8)+(self.row*128)
			x += (i * 8)
			self._buffer[x:x+8] = page
			self.display()
	
	def alignText(self, string="", align="left", col=0, fill=1):
		length = len(string)
		if fill: # fill row
			if align == "center": 
				f = "{:^"+str(16 - col)+"}"
				return f.format(string)
			elif align == "right":
				f = "{:>"+str(16 - col)+"}"
				return f.format(string)
			else: # left
				f = "{:"+str(16 - col)+"}"
				return f.format(string)
		else: # change col pos
			if align == "center":
				col = ((16 - col - length) / 2) + col
				return string
			elif align == "right":
				col = 16 - length
				return string
			else:
				return string
	
	def getAscii(self):
		# ascii font
		ascii = [[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]] * 32
		ascii.extend([
			[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00], # space
			[0x00,0x00,0x5F,0x00,0x00,0x00,0x00,0x00], # ! 	exclamation mark
			[0x00,0x00,0x07,0x00,0x07,0x00,0x00,0x00], # " 	double quote
			[0x00,0x14,0x7F,0x14,0x7F,0x14,0x00,0x00], # # 	number
			[0x00,0x24,0x2A,0x7F,0x2A,0x12,0x00,0x00], # $ 	dollar
			[0x00,0x23,0x13,0x08,0x64,0x62,0x00,0x00], # % 	percent
			[0x00,0x36,0x49,0x55,0x22,0x50,0x00,0x00], # & 	ampersand
			[0x00,0x00,0x05,0x03,0x00,0x00,0x00,0x00], # ' 	single quote
			[0x00,0x1C,0x22,0x41,0x00,0x00,0x00,0x00], # ( 	left parenthesis
			[0x00,0x41,0x22,0x1C,0x00,0x00,0x00,0x00], # ) 	right parenthesis
			[0x00,0x08,0x2A,0x1C,0x2A,0x08,0x00,0x00], # * 	asterisk
			[0x00,0x08,0x08,0x3E,0x08,0x08,0x00,0x00], # + 	plus
			[0x00,0xA0,0x60,0x00,0x00,0x00,0x00,0x00], # , 	comma
			[0x00,0x08,0x08,0x08,0x08,0x08,0x00,0x00], # - 	minus
			[0x00,0x60,0x60,0x00,0x00,0x00,0x00,0x00], # . 	period
			[0x00,0x20,0x10,0x08,0x04,0x02,0x00,0x00], # / 	slash
			[0x00,0x3E,0x51,0x49,0x45,0x3E,0x00,0x00], # 0 	zero
			[0x00,0x00,0x42,0x7F,0x40,0x00,0x00,0x00], # 1 	one
			[0x00,0x62,0x51,0x49,0x49,0x46,0x00,0x00], # 2 	two
			[0x00,0x22,0x41,0x49,0x49,0x36,0x00,0x00], # 3 	three
			[0x00,0x18,0x14,0x12,0x7F,0x10,0x00,0x00], # 4 	four
			[0x00,0x27,0x45,0x45,0x45,0x39,0x00,0x00], # 5 	five
			[0x00,0x3C,0x4A,0x49,0x49,0x30,0x00,0x00], # 6 	six
			[0x00,0x01,0x71,0x09,0x05,0x03,0x00,0x00], # 7 	seven
			[0x00,0x36,0x49,0x49,0x49,0x36,0x00,0x00], # 8 	eight
			[0x00,0x06,0x49,0x49,0x29,0x1E,0x00,0x00], # 9 	nine
			[0x00,0x00,0x36,0x36,0x00,0x00,0x00,0x00], # : 	colon
			[0x00,0x00,0xAC,0x6C,0x00,0x00,0x00,0x00], # ; 	semicolon
			[0x00,0x08,0x14,0x22,0x41,0x00,0x00,0x00], # < 	less than
			[0x00,0x14,0x14,0x14,0x14,0x14,0x00,0x00], # = 	equality sign
			[0x00,0x41,0x22,0x14,0x08,0x00,0x00,0x00], # > 	greater than
			[0x00,0x02,0x01,0x51,0x09,0x06,0x00,0x00], # ? 	question mark
			[0x00,0x32,0x49,0x79,0x41,0x3E,0x00,0x00], # @ 	at sign
			[0x00,0x7E,0x09,0x09,0x09,0x7E,0x00,0x00], # A 	 
			[0x00,0x7F,0x49,0x49,0x49,0x36,0x00,0x00], # B 	 
			[0x00,0x3E,0x41,0x41,0x41,0x22,0x00,0x00], # C 	 
			[0x00,0x7F,0x41,0x41,0x22,0x1C,0x00,0x00], # D 	 
			[0x00,0x7F,0x49,0x49,0x49,0x41,0x00,0x00], # E 	 
			[0x00,0x7F,0x09,0x09,0x09,0x01,0x00,0x00], # F 	 
			[0x00,0x3E,0x41,0x41,0x51,0x72,0x00,0x00], # G 	 
			[0x00,0x7F,0x08,0x08,0x08,0x7F,0x00,0x00], # H 	 
			[0x00,0x41,0x7F,0x41,0x00,0x00,0x00,0x00], # I 	 
			[0x00,0x20,0x40,0x41,0x3F,0x01,0x00,0x00], # J 	 
			[0x00,0x7F,0x08,0x14,0x22,0x41,0x00,0x00], # K 	 
			[0x00,0x7F,0x40,0x40,0x40,0x40,0x00,0x00], # L 	 
			[0x00,0x7F,0x02,0x0C,0x02,0x7F,0x00,0x00], # M 	 
			[0x00,0x7F,0x04,0x08,0x10,0x7F,0x00,0x00], # N 	 
			[0x00,0x3E,0x41,0x41,0x41,0x3E,0x00,0x00], # O 	 
			[0x00,0x7F,0x09,0x09,0x09,0x06,0x00,0x00], # P 	 
			[0x00,0x3E,0x41,0x51,0x21,0x5E,0x00,0x00], # Q 	 
			[0x00,0x7F,0x09,0x19,0x29,0x46,0x00,0x00], # R 	 
			[0x00,0x26,0x49,0x49,0x49,0x32,0x00,0x00], # S 	 
			[0x00,0x01,0x01,0x7F,0x01,0x01,0x00,0x00], # T 	 
			[0x00,0x3F,0x40,0x40,0x40,0x3F,0x00,0x00], # U 	 
			[0x00,0x1F,0x20,0x40,0x20,0x1F,0x00,0x00], # V 	 
			[0x00,0x3F,0x40,0x38,0x40,0x3F,0x00,0x00], # W 	 
			[0x00,0x63,0x14,0x08,0x14,0x63,0x00,0x00], # X 	 
			[0x00,0x03,0x04,0x78,0x04,0x03,0x00,0x00], # Y 	 
			[0x00,0x61,0x51,0x49,0x45,0x43,0x00,0x00], # Z 	 
			[0x00,0x7F,0x41,0x41,0x00,0x00,0x00,0x00], # [ 	left square bracket
			[0x00,0x02,0x04,0x08,0x10,0x20,0x00,0x00], # \ 	backslash
			[0x00,0x41,0x41,0x7F,0x00,0x00,0x00,0x00], # ] 	right square bracket
			[0x00,0x04,0x02,0x01,0x02,0x04,0x00,0x00], # ^ 	caret / circumflex
			[0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00], # _ 	underscore
			[0x00,0x01,0x02,0x04,0x00,0x00,0x00,0x00], # ` 	grave / accent
			[0x00,0x20,0x54,0x54,0x54,0x78,0x00,0x00], # a 	 
			[0x00,0x7F,0x48,0x44,0x44,0x38,0x00,0x00], # b 	 
			[0x00,0x38,0x44,0x44,0x28,0x00,0x00,0x00], # c 	 
			[0x00,0x38,0x44,0x44,0x48,0x7F,0x00,0x00], # d 	 
			[0x00,0x38,0x54,0x54,0x54,0x18,0x00,0x00], # e 	 
			[0x00,0x08,0x7E,0x09,0x02,0x00,0x00,0x00], # f 	 
			[0x00,0x18,0xA4,0xA4,0xA4,0x7C,0x00,0x00], # g 	 
			[0x00,0x7F,0x08,0x04,0x04,0x78,0x00,0x00], # h 	 
			[0x00,0x00,0x7D,0x00,0x00,0x00,0x00,0x00], # i 	 
			[0x00,0x80,0x84,0x7D,0x00,0x00,0x00,0x00], # j 	 
			[0x00,0x7F,0x10,0x28,0x44,0x00,0x00,0x00], # k 	 
			[0x00,0x41,0x7F,0x40,0x00,0x00,0x00,0x00], # l 	 
			[0x00,0x7C,0x04,0x18,0x04,0x78,0x00,0x00], # m 	 
			[0x00,0x7C,0x08,0x04,0x7C,0x00,0x00,0x00], # n 	 
			[0x00,0x38,0x44,0x44,0x38,0x00,0x00,0x00], # o 	 
			[0x00,0xFC,0x24,0x24,0x18,0x00,0x00,0x00], # p 	 
			[0x00,0x18,0x24,0x24,0xFC,0x00,0x00,0x00], # q 	 
			[0x00,0x00,0x7C,0x08,0x04,0x00,0x00,0x00], # r 	 
			[0x00,0x48,0x54,0x54,0x24,0x00,0x00,0x00], # s 	 
			[0x00,0x04,0x7F,0x44,0x00,0x00,0x00,0x00], # t 	 
			[0x00,0x3C,0x40,0x40,0x7C,0x00,0x00,0x00], # u 	 
			[0x00,0x1C,0x20,0x40,0x20,0x1C,0x00,0x00], # v 	 
			[0x00,0x3C,0x40,0x30,0x40,0x3C,0x00,0x00], # w 	 
			[0x00,0x44,0x28,0x10,0x28,0x44,0x00,0x00], # x 	 
			[0x00,0x1C,0xA0,0xA0,0x7C,0x00,0x00,0x00], # y 	 
			[0x00,0x44,0x64,0x54,0x4C,0x44,0x00,0x00], # z 	 
			[0x00,0x08,0x36,0x41,0x00,0x00,0x00,0x00], # { 	left curly bracket
			[0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00], # | 	vertical bar
			[0x00,0x41,0x36,0x08,0x00,0x00,0x00,0x00], # } 	right curly bracket
			[0x00,0x02,0x01,0x01,0x02,0x01,0x00,0x00], # ~ 	tilde
			[0x00,0x02,0x05,0x05,0x02,0x00,0x00,0x00]  # DEL 	delete
		])
		return ascii

if __name__ == "__main__":
	print "you are in class OledSSD1306"
	# Raspberry Pi pin configuration:
	RST = 24
	# Note the following are only used with SPI:
	DC = 23
	SPI_PORT = 0
	SPI_DEVICE = 0
	# 128x64 display with hardware SPI:
	oled = OledSSD1306_SPI(rst=RST, dc=DC, spi=SPI.SpiDev(SPI_PORT, SPI_DEVICE, max_speed_hz=8000000))
	
	oled.init_OLED()
	
	heartPixels = [ 									# page pixels description
			0, 0, 0, 0, 0, 0, 0, 0,
			0, 1, 1, 0, 1, 1, 0, 0,
			1, 1, 1, 1, 1, 1, 1, 0,
			1, 1, 1, 1, 1, 1, 1, 0,
			0, 1, 1, 1, 1, 1, 0, 0,
			0, 0, 1, 1, 1, 0, 0, 0,
			0, 0, 0, 1, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0
		]
	heartBytes = b'\x0c\x1e\x3e\x7c\x3e\x1e\x0c\x00'	# same by bytes
	heartInts = [12, 30, 62, 124, 62, 30, 12, 0]		# same by ints
	
	try:
		while True:
			oled.normalDisplay()
			oled.clearDisplay()
			time.sleep(1)
			row = 1
			# intro text
			for i in xrange(16): # fill row
				oled.showPageAt(row=row+1, col=i, data=heartPixels)
			
			oled.showPageAt(row=row+2, col=0,  data=heartInts)
			oled.showPageAt(row=row+2, col=15, data=heartInts)
			
			oled.showTextAt(row=row+3, align="center",  string="The Look")
			oled.showPageAt(row=row+3, col=0,  data=heartInts)
			oled.showPageAt(row=row+3, col=15, data=heartInts)
			
			oled.showPageAt(row=row+4, col=0,  data=heartInts)
			oled.showPageAt(row=row+4, col=15, data=heartInts)
			
			for i in xrange(16): # fill row
				oled.showPageAt(row=row+5, col=i, data=heartBytes)
				
			time.sleep(2)
			
			oled.clearDisplay()
			time.sleep(1)
			
			# image screen fade in
			for i in xrange(0,255,8):
				oled.setBrightness(i)
				oled.fillScreen(file="bacall.bin")
				time.sleep(0.05)
				
			oled.setBrightness(160)
				
			time.sleep(3)
				
			# add scroll text on top
			oled.setScroll(speed=2, end=0)	
			oled.showTextAt(string="Glamour star")
			time.sleep(0.5)
			oled.activeScroll()
			time.sleep(5)
			oled.desactiveScroll()
			
			oled.fillScreen(file="bacall.bin")
			
			oled.setScroll(to="left", speed=2, start=7, end=7)	
			oled.showTextAt(string="Lauren Bacall", row=7, align="right")
			time.sleep(0.5)
			oled.activeScroll()
			time.sleep(5)
			oled.desactiveScroll()
			
			oled.fillScreen(file="bacall.bin")
			
			oled.inverseDisplay()
			
			oled.setScroll(speed=25, end=0)		
			oled.showTextAt(string="The Look")
			time.sleep(0.5)
			oled.activeScroll()
			time.sleep(5)
			oled.desactiveScroll()
			
			oled.fillScreen(file="bacall.bin")
			
			oled.setScroll(to="left", speed=25, start=7, end=7)		
			oled.showTextAt(string="of Hollywood", row=7, align="right")
			time.sleep(0.5)
			oled.activeScroll()
			time.sleep(5)
			oled.desactiveScroll()
			
			oled.normalDisplay()
			
			oled.fillScreen(file="bacall.bin")
			
			for i in [2,3,4,5,25,64]:
				oled.setScroll(speed=i)
				oled.activeScroll()
				time.sleep(1)
				oled.desactiveScroll()
	except KeyboardInterrupt:
		oled.desactiveScroll()
		oled.normalDisplay()
		oled.clearDisplay()
		print " exit"
